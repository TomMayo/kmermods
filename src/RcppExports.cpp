// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "kmermods_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// let2base_c
int let2base_c(String letter, CharacterVector alph_vect);
RcppExport SEXP kmermods_let2base_c(SEXP letterSEXP, SEXP alph_vectSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< String >::type letter(letterSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type alph_vect(alph_vectSEXP);
    __result = Rcpp::wrap(let2base_c(letter, alph_vect));
    return __result;
END_RCPP
}
// base5to10_c
int base5to10_c(NumericVector number, int k, int base);
RcppExport SEXP kmermods_base5to10_c(SEXP numberSEXP, SEXP kSEXP, SEXP baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type number(numberSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type base(baseSEXP);
    __result = Rcpp::wrap(base5to10_c(number, k, base));
    return __result;
END_RCPP
}
// convert10to5_c
NumericVector convert10to5_c(int number_b10, int k, int base);
RcppExport SEXP kmermods_convert10to5_c(SEXP number_b10SEXP, SEXP kSEXP, SEXP baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type number_b10(number_b10SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type base(baseSEXP);
    __result = Rcpp::wrap(convert10to5_c(number_b10, k, base));
    return __result;
END_RCPP
}
// convert10tobase_c
NumericVector convert10tobase_c(double number_b10, int k, int base);
RcppExport SEXP kmermods_convert10tobase_c(SEXP number_b10SEXP, SEXP kSEXP, SEXP baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type number_b10(number_b10SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type base(baseSEXP);
    __result = Rcpp::wrap(convert10tobase_c(number_b10, k, base));
    return __result;
END_RCPP
}
// mismatch_kmers
int mismatch_kmers(double kmer_1, double kmer_2, int k, int base);
RcppExport SEXP kmermods_mismatch_kmers(SEXP kmer_1SEXP, SEXP kmer_2SEXP, SEXP kSEXP, SEXP baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type kmer_1(kmer_1SEXP);
    Rcpp::traits::input_parameter< double >::type kmer_2(kmer_2SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type base(baseSEXP);
    __result = Rcpp::wrap(mismatch_kmers(kmer_1, kmer_2, k, base));
    return __result;
END_RCPP
}
// update_paras
NumericVector update_paras(IntegerVector kmers, NumericVector update_vec, double err_term, bool add_to_update);
RcppExport SEXP kmermods_update_paras(SEXP kmersSEXP, SEXP update_vecSEXP, SEXP err_termSEXP, SEXP add_to_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type kmers(kmersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type update_vec(update_vecSEXP);
    Rcpp::traits::input_parameter< double >::type err_term(err_termSEXP);
    Rcpp::traits::input_parameter< bool >::type add_to_update(add_to_updateSEXP);
    __result = Rcpp::wrap(update_paras(kmers, update_vec, err_term, add_to_update));
    return __result;
END_RCPP
}
// kmer_dot_prod_c
double kmer_dot_prod_c(Rcpp::IntegerVector indices, Rcpp::NumericVector params, nullable_t warp_);
RcppExport SEXP kmermods_kmer_dot_prod_c(SEXP indicesSEXP, SEXP paramsSEXP, SEXP warp_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< nullable_t >::type warp_(warp_SEXP);
    __result = Rcpp::wrap(kmer_dot_prod_c(indices, params, warp_));
    return __result;
END_RCPP
}
// unwrap_kmers
NumericVector unwrap_kmers(double kmer, double old_len, double new_len, double base, int num_kmers);
RcppExport SEXP kmermods_unwrap_kmers(SEXP kmerSEXP, SEXP old_lenSEXP, SEXP new_lenSEXP, SEXP baseSEXP, SEXP num_kmersSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type kmer(kmerSEXP);
    Rcpp::traits::input_parameter< double >::type old_len(old_lenSEXP);
    Rcpp::traits::input_parameter< double >::type new_len(new_lenSEXP);
    Rcpp::traits::input_parameter< double >::type base(baseSEXP);
    Rcpp::traits::input_parameter< int >::type num_kmers(num_kmersSEXP);
    __result = Rcpp::wrap(unwrap_kmers(kmer, old_len, new_len, base, num_kmers));
    return __result;
END_RCPP
}
// unwrap_kmers_vect
NumericVector unwrap_kmers_vect(NumericVector kmers, double old_len, double new_len, double base, int num_kmers);
RcppExport SEXP kmermods_unwrap_kmers_vect(SEXP kmersSEXP, SEXP old_lenSEXP, SEXP new_lenSEXP, SEXP baseSEXP, SEXP num_kmersSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type kmers(kmersSEXP);
    Rcpp::traits::input_parameter< double >::type old_len(old_lenSEXP);
    Rcpp::traits::input_parameter< double >::type new_len(new_lenSEXP);
    Rcpp::traits::input_parameter< double >::type base(baseSEXP);
    Rcpp::traits::input_parameter< int >::type num_kmers(num_kmersSEXP);
    __result = Rcpp::wrap(unwrap_kmers_vect(kmers, old_len, new_len, base, num_kmers));
    return __result;
END_RCPP
}
// params_peaks_noslide
NumericVector params_peaks_noslide(Rcpp::IntegerVector kmers_win, Rcpp::NumericVector params, NumericMatrix peaks, int win_size, int chrom_loc, nullable_t warp_);
RcppExport SEXP kmermods_params_peaks_noslide(SEXP kmers_winSEXP, SEXP paramsSEXP, SEXP peaksSEXP, SEXP win_sizeSEXP, SEXP chrom_locSEXP, SEXP warp_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type kmers_win(kmers_winSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type peaks(peaksSEXP);
    Rcpp::traits::input_parameter< int >::type win_size(win_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type chrom_loc(chrom_locSEXP);
    Rcpp::traits::input_parameter< nullable_t >::type warp_(warp_SEXP);
    __result = Rcpp::wrap(params_peaks_noslide(kmers_win, params, peaks, win_size, chrom_loc, warp_));
    return __result;
END_RCPP
}
// l1_prox_op
NumericVector l1_prox_op(Rcpp::NumericVector params, double thresh);
RcppExport SEXP kmermods_l1_prox_op(SEXP paramsSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    __result = Rcpp::wrap(l1_prox_op(params, thresh));
    return __result;
END_RCPP
}
